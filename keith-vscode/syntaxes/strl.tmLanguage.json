{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Esterel",
  "scopeName": "text.strl",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#annotations"
    },
    {
      "include": "#constants-and-special-vars"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.strl",
          "match": "\\b(_|abort|and|await|bool|boolean|call|case|class|combine|commuting|conflicting|const|constant|copymodule|do|double|each|else|elsif|emit|end|enum|every|exec|exit|expression|extern|fby|float|for|fork|function|global|goto|halt|handle|host|if|immediate|in|input|inputoutput|int|integer|is|join|json|label|loop|max|min|mod|module|none|not|nothing|null|or|output|par|pause|positive|pre|present|print|private|procedure|protected|public|pure|random|randomize|ref|relation|repeat|return|run|schedule|scope|sensor|sfby|signal|static|string|struct|suspend|sustain|task|then|this|tick|timeout|times|to|trap|type|unsigned|upto|val|var|void|watching|weak|when|while|with)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.strl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.strl",
          "match": "."
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "storage.type.annotation.strl",
          "match": "@\\w*"
        }
      ]
    },
    "constants-and-special-vars": {
      "patterns": [
        {
          "name": "constant.language.strl",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.numeric.integer.strl",
          "match": "\\b(0|[1-9]([0-9_]*[0-9])?)[lL]?(?!\\w|\\.)"
        },
        {
          "name": "constant.numeric.float.strl",
          "match": "(?x)\n\t\t\t\t\t\t(?\u003c!\\w)\t\t\t\t\t\t\t\t\t\t\t# Ensure word boundry\n\t\t\t\t\t\t(?\u003e\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(0|[1-9]([0-9_]*[0-9])?)\t\t\t\t# Leading digits\n\t\t\t\t\t\t\t\t(?\u003d[eEfFdD.])\t\t\t\t\t\t\t# Allow for numbers without .\n\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t(?\u003c\u003d[0-9])(?\u003d[eEfFdD])\t\t\t\t\t# Allow for numbers without .\n\t\t\t\t\t\t\t  | \\.\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t[0-9]([0-9_]*[0-9])?\t\t\t\t\t# Numbers after .\n\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t[eE][+-]?(0|[1-9]([0-9_]*[0-9])?)\t\t# Exponent\n\t\t\t\t\t\t\t)?\n\t\t\t\t\t\t\t[fFdD]?\t\t\t\t\t\t\t\t\t\t# Float Type Suffix\n\t\t\t\t\t\t)\n\t\t\t\t\t\t(?!\\w)\t\t\t\t\t\t\t\t\t\t\t# Ensure word boundry\n\t\t\t\t\t"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.strl",
          "begin": "(/\\*)(?:\\s*((@)internal)(?\u003d\\s|(\\*/)))?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.strl"
            },
            "2": {
              "name": "punctuation.decorator.internaldeclaration.strl"
            },
            "3": {}
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.whitespace.comment.leading.strl"
            }
          }
        },
        {
          "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?\u003d\\s|$))?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.strl"
            },
            "2": {
              "name": "comment.line.double-slash.strl"
            }
          },
          "end": "(?\u003d^)",
          "contentName": "comment.line.double-slash.strl"
        }
      ]
    }
  }
}